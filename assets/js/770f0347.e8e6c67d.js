"use strict";(self.webpackChunkdomino_docs=self.webpackChunkdomino_docs||[]).push([[7296],{3905:(e,n,o)=>{o.d(n,{Zo:()=>p,kt:()=>h});var t=o(7294);function i(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function a(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function r(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?a(Object(o),!0).forEach((function(n){i(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function s(e,n){if(null==e)return{};var o,t,i=function(e,n){if(null==e)return{};var o,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||(i[o]=e[o]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}var c=t.createContext({}),l=function(e){var n=t.useContext(c),o=n;return e&&(o="function"==typeof e?e(n):r(r({},n),e)),o},p=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var o=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(o),u=i,h=m["".concat(c,".").concat(u)]||m[u]||d[u]||a;return o?t.createElement(h,r(r({ref:n},p),{},{components:o})):t.createElement(h,r({ref:n},p))}));function h(e,n){var o=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=o.length,r=new Array(a);r[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[m]="string"==typeof e?e:i,r[1]=s;for(var l=2;l<a;l++)r[l]=o[l];return t.createElement.apply(null,r)}return t.createElement.apply(null,o)}u.displayName="MDXCreateElement"},5841:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var t=o(7462),i=(o(7294),o(3905));const a={sidebar_position:4},r="Domino Python package",s={unversionedId:"domino_components/domino_components_python_package",id:"domino_components/domino_components_python_package",title:"Domino Python package",description:"The Domino python package brings a collection of convenience classes and functions to work with Domino.",source:"@site/docs/domino_components/domino_components_python_package.md",sourceDirName:"domino_components",slug:"/domino_components/domino_components_python_package",permalink:"/docs/domino_components/domino_components_python_package",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Domino Database",permalink:"/docs/domino_components/domino_components_database"}},c={},l=[{value:"BasePiece (Domino class)",id:"basepiece-domino-class",level:3},{value:"Task (Domino class)",id:"task-domino-class",level:3},{value:"DominoKubernetesPodOperator (Domino class)",id:"dominokubernetespodoperator-domino-class",level:3},{value:"DominoDockerOperator (Domino class)",id:"dominodockeroperator-domino-class",level:3},{value:"CLI",id:"cli",level:3},{value:"Diagram",id:"diagram",level:3}],p={toc:l},m="wrapper";function d(e){let{components:n,...a}=e;return(0,i.kt)(m,(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"domino-python-package"},"Domino Python package"),(0,i.kt)("p",null,"The Domino python package brings a collection of convenience classes and functions to work with Domino."),(0,i.kt)("p",null,"Domino provides 3 different installation options:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install domino-py[cli]     # Domino installation with minimum dependencies (recommended).\npip install domino-py[airflow] # Domino installation with only Airflow dependencies.\npip install domino-py[full]    # Domino installation with all dependencies.\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The recommended installation for most users is"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install domino-py[cli]\n"))),(0,i.kt)("h3",{id:"basepiece-domino-class"},"BasePiece (Domino class)"),(0,i.kt)("p",null,"This is the base class from which every custom Domino Piece should inherit from. It defines the common attributes and methods for all the Domino Pieces.",(0,i.kt)("br",{parentName:"p"}),"\n","This is an abstract class that has ",(0,i.kt)("inlineCode",{parentName:"p"},"piece_function")," as an abstract method. This method is the one that will be executed when the Piece run. The ",(0,i.kt)("inlineCode",{parentName:"p"},"piece_function")," method should be implemented in your pieces as shown in ",(0,i.kt)("a",{parentName:"p",href:"/docs/pieces/create_pieces#piecepy"},"Create Pieces"),"."),(0,i.kt)("h3",{id:"task-domino-class"},"Task (Domino class)"),(0,i.kt)("p",null,"This class defines the objects for each task in the AirfLow dag. Once instantiated it will return either a ",(0,i.kt)("inlineCode",{parentName:"p"},"DominoKubernetesPodOperator")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"DominoDockerOperator")," object, properly configured with the target Piece arguments, secrets and volume mounts.",(0,i.kt)("br",{parentName:"p"}),"\n","The ",(0,i.kt)("inlineCode",{parentName:"p"},"Task")," class is the main entry point for the Domino package for each step in a workflow. The Domino task is responsible for setting up the correct Domino Operator based on the identified runtime environment, and passing the correct arguments to this operator."),(0,i.kt)("h3",{id:"dominokubernetespodoperator-domino-class"},"DominoKubernetesPodOperator (Domino class)"),(0,i.kt)("p",null,"This class is an extension of the Airflow's ",(0,i.kt)("inlineCode",{parentName:"p"},"KubernetesPodOperator")," class. It adds Domino specific functionalities and information. Runtime information is passed as ENV variables to the container running the target Piece.\nThe use of this class is automatically determined by the ",(0,i.kt)("inlineCode",{parentName:"p"},"Task")," class based on the environment where Domino is running. "),(0,i.kt)("h3",{id:"dominodockeroperator-domino-class"},"DominoDockerOperator (Domino class)"),(0,i.kt)("p",null,"This class is an extension of the Airflow's ",(0,i.kt)("inlineCode",{parentName:"p"},"DockerOperator")," class. It adds Domino specific functionalities and information. Runtime information is passed as ENV variables to the container running the target Piece.\nThe use of this class is automatically determined by the ",(0,i.kt)("inlineCode",{parentName:"p"},"Task")," class based on the environment where Domino is running. "),(0,i.kt)("h3",{id:"cli"},"CLI"),(0,i.kt)("p",null,"The Domino command line interface helps users to set up and run a local Domino platform, as well as organize and validate their Domino Piece repositories.\nThe CLI dispone of the following commands:\nYou can use ",(0,i.kt)("inlineCode",{parentName:"p"},"domino --help")," to see the available commands and options."),(0,i.kt)("h3",{id:"diagram"},"Diagram"),(0,i.kt)("p",null,"A simplified view of how Domino classes interact with each other is shown in the following diagram:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Domino Classes Diagram",src:o(4971).Z,width:"621",height:"451"})))}d.isMDXComponent=!0},4971:(e,n,o)=>{o.d(n,{Z:()=>t});const t=o.p+"assets/images/domino-package_classes-a5cc965cad3514caa7742c12fa16c8d9.png"}}]);